// // Copyright 2022 Antrea Authors.
// //
// // Licensed under the Apache License, Version 2.0 (the "License");
// // you may not use this file except in compliance with the License.
// // You may obtain a copy of the License at
// //
// //      http://www.apache.org/licenses/LICENSE-2.0
// //
// // Unless required by applicable law or agreed to in writing, software
// // distributed under the License is distributed on an "AS IS" BASIS,
// // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// // See the License for the specific language governing permissions and
// // limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cloudprovider/cloudapi/aws/aws_api_wrappers.go

// Package aws is a generated GoMock package.
package aws

import (
	reflect "reflect"

	ec2 "github.com/aws/aws-sdk-go/service/ec2"
	gomock "github.com/golang/mock/gomock"
)

// MockawsEC2Wrapper is a mock of awsEC2Wrapper interface.
type MockawsEC2Wrapper struct {
	ctrl     *gomock.Controller
	recorder *MockawsEC2WrapperMockRecorder
}

// MockawsEC2WrapperMockRecorder is the mock recorder for MockawsEC2Wrapper.
type MockawsEC2WrapperMockRecorder struct {
	mock *MockawsEC2Wrapper
}

// NewMockawsEC2Wrapper creates a new mock instance.
func NewMockawsEC2Wrapper(ctrl *gomock.Controller) *MockawsEC2Wrapper {
	mock := &MockawsEC2Wrapper{ctrl: ctrl}
	mock.recorder = &MockawsEC2WrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockawsEC2Wrapper) EXPECT() *MockawsEC2WrapperMockRecorder {
	return m.recorder
}

// authorizeSecurityGroupEgress mocks base method.
func (m *MockawsEC2Wrapper) authorizeSecurityGroupEgress(input *ec2.AuthorizeSecurityGroupEgressInput) (*ec2.AuthorizeSecurityGroupEgressOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "authorizeSecurityGroupEgress", input)
	ret0, _ := ret[0].(*ec2.AuthorizeSecurityGroupEgressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// authorizeSecurityGroupEgress indicates an expected call of authorizeSecurityGroupEgress.
func (mr *MockawsEC2WrapperMockRecorder) authorizeSecurityGroupEgress(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "authorizeSecurityGroupEgress", reflect.TypeOf((*MockawsEC2Wrapper)(nil).authorizeSecurityGroupEgress), input)
}

// authorizeSecurityGroupIngress mocks base method.
func (m *MockawsEC2Wrapper) authorizeSecurityGroupIngress(input *ec2.AuthorizeSecurityGroupIngressInput) (*ec2.AuthorizeSecurityGroupIngressOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "authorizeSecurityGroupIngress", input)
	ret0, _ := ret[0].(*ec2.AuthorizeSecurityGroupIngressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// authorizeSecurityGroupIngress indicates an expected call of authorizeSecurityGroupIngress.
func (mr *MockawsEC2WrapperMockRecorder) authorizeSecurityGroupIngress(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "authorizeSecurityGroupIngress", reflect.TypeOf((*MockawsEC2Wrapper)(nil).authorizeSecurityGroupIngress), input)
}

// createSecurityGroup mocks base method.
func (m *MockawsEC2Wrapper) createSecurityGroup(input *ec2.CreateSecurityGroupInput) (*ec2.CreateSecurityGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createSecurityGroup", input)
	ret0, _ := ret[0].(*ec2.CreateSecurityGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createSecurityGroup indicates an expected call of createSecurityGroup.
func (mr *MockawsEC2WrapperMockRecorder) createSecurityGroup(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createSecurityGroup", reflect.TypeOf((*MockawsEC2Wrapper)(nil).createSecurityGroup), input)
}

// deleteSecurityGroup mocks base method.
func (m *MockawsEC2Wrapper) deleteSecurityGroup(input *ec2.DeleteSecurityGroupInput) (*ec2.DeleteSecurityGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteSecurityGroup", input)
	ret0, _ := ret[0].(*ec2.DeleteSecurityGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// deleteSecurityGroup indicates an expected call of deleteSecurityGroup.
func (mr *MockawsEC2WrapperMockRecorder) deleteSecurityGroup(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteSecurityGroup", reflect.TypeOf((*MockawsEC2Wrapper)(nil).deleteSecurityGroup), input)
}

// describeSecurityGroups mocks base method.
func (m *MockawsEC2Wrapper) describeSecurityGroups(input *ec2.DescribeSecurityGroupsInput) (*ec2.DescribeSecurityGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "describeSecurityGroups", input)
	ret0, _ := ret[0].(*ec2.DescribeSecurityGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// describeSecurityGroups indicates an expected call of describeSecurityGroups.
func (mr *MockawsEC2WrapperMockRecorder) describeSecurityGroups(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "describeSecurityGroups", reflect.TypeOf((*MockawsEC2Wrapper)(nil).describeSecurityGroups), input)
}

// describeVpcPeeringConnectionsWrapper mocks base method.
func (m *MockawsEC2Wrapper) describeVpcPeeringConnectionsWrapper(input *ec2.DescribeVpcPeeringConnectionsInput) (*ec2.DescribeVpcPeeringConnectionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "describeVpcPeeringConnectionsWrapper", input)
	ret0, _ := ret[0].(*ec2.DescribeVpcPeeringConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// describeVpcPeeringConnectionsWrapper indicates an expected call of describeVpcPeeringConnectionsWrapper.
func (mr *MockawsEC2WrapperMockRecorder) describeVpcPeeringConnectionsWrapper(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "describeVpcPeeringConnectionsWrapper", reflect.TypeOf((*MockawsEC2Wrapper)(nil).describeVpcPeeringConnectionsWrapper), input)
}

// describeVpcsWrapper mocks base method.
func (m *MockawsEC2Wrapper) describeVpcsWrapper(input *ec2.DescribeVpcsInput) (*ec2.DescribeVpcsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "describeVpcsWrapper", input)
	ret0, _ := ret[0].(*ec2.DescribeVpcsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// describeVpcsWrapper indicates an expected call of describeVpcsWrapper.
func (mr *MockawsEC2WrapperMockRecorder) describeVpcsWrapper(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "describeVpcsWrapper", reflect.TypeOf((*MockawsEC2Wrapper)(nil).describeVpcsWrapper), input)
}

// modifyNetworkInterfaceAttribute mocks base method.
func (m *MockawsEC2Wrapper) modifyNetworkInterfaceAttribute(input *ec2.ModifyNetworkInterfaceAttributeInput) (*ec2.ModifyNetworkInterfaceAttributeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "modifyNetworkInterfaceAttribute", input)
	ret0, _ := ret[0].(*ec2.ModifyNetworkInterfaceAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// modifyNetworkInterfaceAttribute indicates an expected call of modifyNetworkInterfaceAttribute.
func (mr *MockawsEC2WrapperMockRecorder) modifyNetworkInterfaceAttribute(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "modifyNetworkInterfaceAttribute", reflect.TypeOf((*MockawsEC2Wrapper)(nil).modifyNetworkInterfaceAttribute), input)
}

// pagedDescribeInstancesWrapper mocks base method.
func (m *MockawsEC2Wrapper) pagedDescribeInstancesWrapper(input *ec2.DescribeInstancesInput) ([]*ec2.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "pagedDescribeInstancesWrapper", input)
	ret0, _ := ret[0].([]*ec2.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// pagedDescribeInstancesWrapper indicates an expected call of pagedDescribeInstancesWrapper.
func (mr *MockawsEC2WrapperMockRecorder) pagedDescribeInstancesWrapper(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "pagedDescribeInstancesWrapper", reflect.TypeOf((*MockawsEC2Wrapper)(nil).pagedDescribeInstancesWrapper), input)
}

// pagedDescribeNetworkInterfaces mocks base method.
func (m *MockawsEC2Wrapper) pagedDescribeNetworkInterfaces(input *ec2.DescribeNetworkInterfacesInput) ([]*ec2.NetworkInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "pagedDescribeNetworkInterfaces", input)
	ret0, _ := ret[0].([]*ec2.NetworkInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// pagedDescribeNetworkInterfaces indicates an expected call of pagedDescribeNetworkInterfaces.
func (mr *MockawsEC2WrapperMockRecorder) pagedDescribeNetworkInterfaces(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "pagedDescribeNetworkInterfaces", reflect.TypeOf((*MockawsEC2Wrapper)(nil).pagedDescribeNetworkInterfaces), input)
}

// revokeSecurityGroupEgress mocks base method.
func (m *MockawsEC2Wrapper) revokeSecurityGroupEgress(input *ec2.RevokeSecurityGroupEgressInput) (*ec2.RevokeSecurityGroupEgressOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "revokeSecurityGroupEgress", input)
	ret0, _ := ret[0].(*ec2.RevokeSecurityGroupEgressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// revokeSecurityGroupEgress indicates an expected call of revokeSecurityGroupEgress.
func (mr *MockawsEC2WrapperMockRecorder) revokeSecurityGroupEgress(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "revokeSecurityGroupEgress", reflect.TypeOf((*MockawsEC2Wrapper)(nil).revokeSecurityGroupEgress), input)
}

// revokeSecurityGroupIngress mocks base method.
func (m *MockawsEC2Wrapper) revokeSecurityGroupIngress(input *ec2.RevokeSecurityGroupIngressInput) (*ec2.RevokeSecurityGroupIngressOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "revokeSecurityGroupIngress", input)
	ret0, _ := ret[0].(*ec2.RevokeSecurityGroupIngressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// revokeSecurityGroupIngress indicates an expected call of revokeSecurityGroupIngress.
func (mr *MockawsEC2WrapperMockRecorder) revokeSecurityGroupIngress(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "revokeSecurityGroupIngress", reflect.TypeOf((*MockawsEC2Wrapper)(nil).revokeSecurityGroupIngress), input)
}
