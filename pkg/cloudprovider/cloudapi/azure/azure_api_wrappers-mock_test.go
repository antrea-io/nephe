// // Copyright 2022 Antrea Authors.
// //
// // Licensed under the Apache License, Version 2.0 (the "License");
// // you may not use this file except in compliance with the License.
// // You may obtain a copy of the License at
// //
// //      http://www.apache.org/licenses/LICENSE-2.0
// //
// // Unless required by applicable law or agreed to in writing, software
// // distributed under the License is distributed on an "AS IS" BASIS,
// // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// // See the License for the specific language governing permissions and
// // limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cloudprovider/cloudapi/azure/azure_api_wrappers.go

// Package azure is a generated GoMock package.
package azure

import (
	context "context"
	reflect "reflect"

	armnetwork "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork"
	armresourcegraph "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resourcegraph/armresourcegraph"
	gomock "github.com/golang/mock/gomock"
)

// MockazureNwIntfWrapper is a mock of azureNwIntfWrapper interface.
type MockazureNwIntfWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockazureNwIntfWrapperMockRecorder
}

// MockazureNwIntfWrapperMockRecorder is the mock recorder for MockazureNwIntfWrapper.
type MockazureNwIntfWrapperMockRecorder struct {
	mock *MockazureNwIntfWrapper
}

// NewMockazureNwIntfWrapper creates a new mock instance.
func NewMockazureNwIntfWrapper(ctrl *gomock.Controller) *MockazureNwIntfWrapper {
	mock := &MockazureNwIntfWrapper{ctrl: ctrl}
	mock.recorder = &MockazureNwIntfWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockazureNwIntfWrapper) EXPECT() *MockazureNwIntfWrapperMockRecorder {
	return m.recorder
}

// createOrUpdate mocks base method.
func (m *MockazureNwIntfWrapper) createOrUpdate(ctx context.Context, resourceGroupName, networkInterfaceName string, parameters armnetwork.Interface) (armnetwork.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createOrUpdate", ctx, resourceGroupName, networkInterfaceName, parameters)
	ret0, _ := ret[0].(armnetwork.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createOrUpdate indicates an expected call of createOrUpdate.
func (mr *MockazureNwIntfWrapperMockRecorder) createOrUpdate(ctx, resourceGroupName, networkInterfaceName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createOrUpdate", reflect.TypeOf((*MockazureNwIntfWrapper)(nil).createOrUpdate), ctx, resourceGroupName, networkInterfaceName, parameters)
}

// listAllComplete mocks base method.
func (m *MockazureNwIntfWrapper) listAllComplete(ctx context.Context) ([]armnetwork.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "listAllComplete", ctx)
	ret0, _ := ret[0].([]armnetwork.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// listAllComplete indicates an expected call of listAllComplete.
func (mr *MockazureNwIntfWrapperMockRecorder) listAllComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listAllComplete", reflect.TypeOf((*MockazureNwIntfWrapper)(nil).listAllComplete), ctx)
}

// MockazureNsgWrapper is a mock of azureNsgWrapper interface.
type MockazureNsgWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockazureNsgWrapperMockRecorder
}

// MockazureNsgWrapperMockRecorder is the mock recorder for MockazureNsgWrapper.
type MockazureNsgWrapperMockRecorder struct {
	mock *MockazureNsgWrapper
}

// NewMockazureNsgWrapper creates a new mock instance.
func NewMockazureNsgWrapper(ctrl *gomock.Controller) *MockazureNsgWrapper {
	mock := &MockazureNsgWrapper{ctrl: ctrl}
	mock.recorder = &MockazureNsgWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockazureNsgWrapper) EXPECT() *MockazureNsgWrapperMockRecorder {
	return m.recorder
}

// createOrUpdate mocks base method.
func (m *MockazureNsgWrapper) createOrUpdate(ctx context.Context, resourceGroupName, networkSecurityGroupName string, parameters armnetwork.SecurityGroup) (armnetwork.SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createOrUpdate", ctx, resourceGroupName, networkSecurityGroupName, parameters)
	ret0, _ := ret[0].(armnetwork.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createOrUpdate indicates an expected call of createOrUpdate.
func (mr *MockazureNsgWrapperMockRecorder) createOrUpdate(ctx, resourceGroupName, networkSecurityGroupName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createOrUpdate", reflect.TypeOf((*MockazureNsgWrapper)(nil).createOrUpdate), ctx, resourceGroupName, networkSecurityGroupName, parameters)
}

// delete mocks base method.
func (m *MockazureNsgWrapper) delete(ctx context.Context, resourceGroupName, networkSecurityGroupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "delete", ctx, resourceGroupName, networkSecurityGroupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// delete indicates an expected call of delete.
func (mr *MockazureNsgWrapperMockRecorder) delete(ctx, resourceGroupName, networkSecurityGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "delete", reflect.TypeOf((*MockazureNsgWrapper)(nil).delete), ctx, resourceGroupName, networkSecurityGroupName)
}

// get mocks base method.
func (m *MockazureNsgWrapper) get(ctx context.Context, resourceGroupName, networkSecurityGroupName, expand string) (armnetwork.SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "get", ctx, resourceGroupName, networkSecurityGroupName, expand)
	ret0, _ := ret[0].(armnetwork.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// get indicates an expected call of get.
func (mr *MockazureNsgWrapperMockRecorder) get(ctx, resourceGroupName, networkSecurityGroupName, expand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "get", reflect.TypeOf((*MockazureNsgWrapper)(nil).get), ctx, resourceGroupName, networkSecurityGroupName, expand)
}

// listAllComplete mocks base method.
func (m *MockazureNsgWrapper) listAllComplete(ctx context.Context) ([]armnetwork.SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "listAllComplete", ctx)
	ret0, _ := ret[0].([]armnetwork.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// listAllComplete indicates an expected call of listAllComplete.
func (mr *MockazureNsgWrapperMockRecorder) listAllComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listAllComplete", reflect.TypeOf((*MockazureNsgWrapper)(nil).listAllComplete), ctx)
}

// MockazureAsgWrapper is a mock of azureAsgWrapper interface.
type MockazureAsgWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockazureAsgWrapperMockRecorder
}

// MockazureAsgWrapperMockRecorder is the mock recorder for MockazureAsgWrapper.
type MockazureAsgWrapperMockRecorder struct {
	mock *MockazureAsgWrapper
}

// NewMockazureAsgWrapper creates a new mock instance.
func NewMockazureAsgWrapper(ctrl *gomock.Controller) *MockazureAsgWrapper {
	mock := &MockazureAsgWrapper{ctrl: ctrl}
	mock.recorder = &MockazureAsgWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockazureAsgWrapper) EXPECT() *MockazureAsgWrapperMockRecorder {
	return m.recorder
}

// createOrUpdate mocks base method.
func (m *MockazureAsgWrapper) createOrUpdate(ctx context.Context, resourceGroupName, applicationSecurityGroupName string, parameters armnetwork.ApplicationSecurityGroup) (armnetwork.ApplicationSecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createOrUpdate", ctx, resourceGroupName, applicationSecurityGroupName, parameters)
	ret0, _ := ret[0].(armnetwork.ApplicationSecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createOrUpdate indicates an expected call of createOrUpdate.
func (mr *MockazureAsgWrapperMockRecorder) createOrUpdate(ctx, resourceGroupName, applicationSecurityGroupName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createOrUpdate", reflect.TypeOf((*MockazureAsgWrapper)(nil).createOrUpdate), ctx, resourceGroupName, applicationSecurityGroupName, parameters)
}

// delete mocks base method.
func (m *MockazureAsgWrapper) delete(ctx context.Context, resourceGroupName, applicationSecurityGroupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "delete", ctx, resourceGroupName, applicationSecurityGroupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// delete indicates an expected call of delete.
func (mr *MockazureAsgWrapperMockRecorder) delete(ctx, resourceGroupName, applicationSecurityGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "delete", reflect.TypeOf((*MockazureAsgWrapper)(nil).delete), ctx, resourceGroupName, applicationSecurityGroupName)
}

// get mocks base method.
func (m *MockazureAsgWrapper) get(ctx context.Context, resourceGroupName, applicationSecurityGroupName string) (armnetwork.ApplicationSecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "get", ctx, resourceGroupName, applicationSecurityGroupName)
	ret0, _ := ret[0].(armnetwork.ApplicationSecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// get indicates an expected call of get.
func (mr *MockazureAsgWrapperMockRecorder) get(ctx, resourceGroupName, applicationSecurityGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "get", reflect.TypeOf((*MockazureAsgWrapper)(nil).get), ctx, resourceGroupName, applicationSecurityGroupName)
}

// listAllComplete mocks base method.
func (m *MockazureAsgWrapper) listAllComplete(ctx context.Context) ([]armnetwork.ApplicationSecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "listAllComplete", ctx)
	ret0, _ := ret[0].([]armnetwork.ApplicationSecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// listAllComplete indicates an expected call of listAllComplete.
func (mr *MockazureAsgWrapperMockRecorder) listAllComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listAllComplete", reflect.TypeOf((*MockazureAsgWrapper)(nil).listAllComplete), ctx)
}

// listComplete mocks base method.
func (m *MockazureAsgWrapper) listComplete(ctx context.Context, resourceGroupName string) ([]armnetwork.ApplicationSecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "listComplete", ctx, resourceGroupName)
	ret0, _ := ret[0].([]armnetwork.ApplicationSecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// listComplete indicates an expected call of listComplete.
func (mr *MockazureAsgWrapperMockRecorder) listComplete(ctx, resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listComplete", reflect.TypeOf((*MockazureAsgWrapper)(nil).listComplete), ctx, resourceGroupName)
}

// MockazureResourceGraphWrapper is a mock of azureResourceGraphWrapper interface.
type MockazureResourceGraphWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockazureResourceGraphWrapperMockRecorder
}

// MockazureResourceGraphWrapperMockRecorder is the mock recorder for MockazureResourceGraphWrapper.
type MockazureResourceGraphWrapperMockRecorder struct {
	mock *MockazureResourceGraphWrapper
}

// NewMockazureResourceGraphWrapper creates a new mock instance.
func NewMockazureResourceGraphWrapper(ctrl *gomock.Controller) *MockazureResourceGraphWrapper {
	mock := &MockazureResourceGraphWrapper{ctrl: ctrl}
	mock.recorder = &MockazureResourceGraphWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockazureResourceGraphWrapper) EXPECT() *MockazureResourceGraphWrapperMockRecorder {
	return m.recorder
}

// resources mocks base method.
func (m *MockazureResourceGraphWrapper) resources(ctx context.Context, query armresourcegraph.QueryRequest) (armresourcegraph.ClientResourcesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "resources", ctx, query)
	ret0, _ := ret[0].(armresourcegraph.ClientResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// resources indicates an expected call of resources.
func (mr *MockazureResourceGraphWrapperMockRecorder) resources(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "resources", reflect.TypeOf((*MockazureResourceGraphWrapper)(nil).resources), ctx, query)
}

// MockazureVirtualNetworksWrapper is a mock of azureVirtualNetworksWrapper interface.
type MockazureVirtualNetworksWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockazureVirtualNetworksWrapperMockRecorder
}

// MockazureVirtualNetworksWrapperMockRecorder is the mock recorder for MockazureVirtualNetworksWrapper.
type MockazureVirtualNetworksWrapperMockRecorder struct {
	mock *MockazureVirtualNetworksWrapper
}

// NewMockazureVirtualNetworksWrapper creates a new mock instance.
func NewMockazureVirtualNetworksWrapper(ctrl *gomock.Controller) *MockazureVirtualNetworksWrapper {
	mock := &MockazureVirtualNetworksWrapper{ctrl: ctrl}
	mock.recorder = &MockazureVirtualNetworksWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockazureVirtualNetworksWrapper) EXPECT() *MockazureVirtualNetworksWrapperMockRecorder {
	return m.recorder
}

// listAllComplete mocks base method.
func (m *MockazureVirtualNetworksWrapper) listAllComplete(ctx context.Context) ([]armnetwork.VirtualNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "listAllComplete", ctx)
	ret0, _ := ret[0].([]armnetwork.VirtualNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// listAllComplete indicates an expected call of listAllComplete.
func (mr *MockazureVirtualNetworksWrapperMockRecorder) listAllComplete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listAllComplete", reflect.TypeOf((*MockazureVirtualNetworksWrapper)(nil).listAllComplete), ctx)
}
