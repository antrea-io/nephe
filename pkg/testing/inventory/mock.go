// // Copyright 2022 Antrea Authors.
// //
// // Licensed under the Apache License, Version 2.0 (the "License");
// // you may not use this file except in compliance with the License.
// // You may obtain a copy of the License at
// //
// //      http://www.apache.org/licenses/LICENSE-2.0
// //
// // Unless required by applicable law or agreed to in writing, software
// // distributed under the License is distributed on an "AS IS" BASIS,
// // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// // See the License for the specific language governing permissions and
// // limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: antrea.io/nephe/pkg/controllers/inventory (interfaces: Inventory)

// Package inventory is a generated GoMock package.
package inventory

import (
	context "context"
	reflect "reflect"

	v1alpha1 "antrea.io/nephe/apis/runtime/v1alpha1"
	gomock "github.com/golang/mock/gomock"
	fields "k8s.io/apimachinery/pkg/fields"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
)

// MockInventory is a mock of Inventory interface.
type MockInventory struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryMockRecorder
}

// MockInventoryMockRecorder is the mock recorder for MockInventory.
type MockInventoryMockRecorder struct {
	mock *MockInventory
}

// NewMockInventory creates a new mock instance.
func NewMockInventory(ctrl *gomock.Controller) *MockInventory {
	mock := &MockInventory{ctrl: ctrl}
	mock.recorder = &MockInventoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventory) EXPECT() *MockInventoryMockRecorder {
	return m.recorder
}

// BuildVmCache mocks base method.
func (m *MockInventory) BuildVmCache(arg0 map[string]*v1alpha1.VirtualMachine, arg1 *types.NamespacedName) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BuildVmCache", arg0, arg1)
}

// BuildVmCache indicates an expected call of BuildVmCache.
func (mr *MockInventoryMockRecorder) BuildVmCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildVmCache", reflect.TypeOf((*MockInventory)(nil).BuildVmCache), arg0, arg1)
}

// BuildVpcCache mocks base method.
func (m *MockInventory) BuildVpcCache(arg0 map[string]*v1alpha1.Vpc, arg1 *types.NamespacedName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildVpcCache", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuildVpcCache indicates an expected call of BuildVpcCache.
func (mr *MockInventoryMockRecorder) BuildVpcCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildVpcCache", reflect.TypeOf((*MockInventory)(nil).BuildVpcCache), arg0, arg1)
}

// DeleteVmsFromCache mocks base method.
func (m *MockInventory) DeleteVmsFromCache(arg0 *types.NamespacedName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVmsFromCache", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVmsFromCache indicates an expected call of DeleteVmsFromCache.
func (mr *MockInventoryMockRecorder) DeleteVmsFromCache(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVmsFromCache", reflect.TypeOf((*MockInventory)(nil).DeleteVmsFromCache), arg0)
}

// DeleteVpcsFromCache mocks base method.
func (m *MockInventory) DeleteVpcsFromCache(arg0 *types.NamespacedName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVpcsFromCache", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVpcsFromCache indicates an expected call of DeleteVpcsFromCache.
func (mr *MockInventoryMockRecorder) DeleteVpcsFromCache(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVpcsFromCache", reflect.TypeOf((*MockInventory)(nil).DeleteVpcsFromCache), arg0)
}

// GetAllVms mocks base method.
func (m *MockInventory) GetAllVms() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVms")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// GetAllVms indicates an expected call of GetAllVms.
func (mr *MockInventoryMockRecorder) GetAllVms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVms", reflect.TypeOf((*MockInventory)(nil).GetAllVms))
}

// GetAllVpcs mocks base method.
func (m *MockInventory) GetAllVpcs() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVpcs")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// GetAllVpcs indicates an expected call of GetAllVpcs.
func (mr *MockInventoryMockRecorder) GetAllVpcs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVpcs", reflect.TypeOf((*MockInventory)(nil).GetAllVpcs))
}

// GetVmBykey mocks base method.
func (m *MockInventory) GetVmBykey(arg0 string) (*v1alpha1.VirtualMachine, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVmBykey", arg0)
	ret0, _ := ret[0].(*v1alpha1.VirtualMachine)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetVmBykey indicates an expected call of GetVmBykey.
func (mr *MockInventoryMockRecorder) GetVmBykey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVmBykey", reflect.TypeOf((*MockInventory)(nil).GetVmBykey), arg0)
}

// GetVmFromIndexer mocks base method.
func (m *MockInventory) GetVmFromIndexer(arg0, arg1 string) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVmFromIndexer", arg0, arg1)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVmFromIndexer indicates an expected call of GetVmFromIndexer.
func (mr *MockInventoryMockRecorder) GetVmFromIndexer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVmFromIndexer", reflect.TypeOf((*MockInventory)(nil).GetVmFromIndexer), arg0, arg1)
}

// GetVpcsFromIndexer mocks base method.
func (m *MockInventory) GetVpcsFromIndexer(arg0, arg1 string) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVpcsFromIndexer", arg0, arg1)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVpcsFromIndexer indicates an expected call of GetVpcsFromIndexer.
func (mr *MockInventoryMockRecorder) GetVpcsFromIndexer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVpcsFromIndexer", reflect.TypeOf((*MockInventory)(nil).GetVpcsFromIndexer), arg0, arg1)
}

// WatchVms mocks base method.
func (m *MockInventory) WatchVms(arg0 context.Context, arg1 string, arg2 labels.Selector, arg3 fields.Selector) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchVms", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchVms indicates an expected call of WatchVms.
func (mr *MockInventoryMockRecorder) WatchVms(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchVms", reflect.TypeOf((*MockInventory)(nil).WatchVms), arg0, arg1, arg2, arg3)
}

// WatchVpcs mocks base method.
func (m *MockInventory) WatchVpcs(arg0 context.Context, arg1 string, arg2 labels.Selector, arg3 fields.Selector) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchVpcs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchVpcs indicates an expected call of WatchVpcs.
func (mr *MockInventoryMockRecorder) WatchVpcs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchVpcs", reflect.TypeOf((*MockInventory)(nil).WatchVpcs), arg0, arg1, arg2, arg3)
}
