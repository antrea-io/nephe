// // Copyright 2022 Antrea Authors.
// //
// // Licensed under the Apache License, Version 2.0 (the "License");
// // you may not use this file except in compliance with the License.
// // You may obtain a copy of the License at
// //
// //      http://www.apache.org/licenses/LICENSE-2.0
// //
// // Unless required by applicable law or agreed to in writing, software
// // distributed under the License is distributed on an "AS IS" BASIS,
// // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// // See the License for the specific language governing permissions and
// // limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: antrea.io/nephe/pkg/cloud-provider/securitygroup (interfaces: CloudSecurityGroupAPI)

// Package cloudsecurity is a generated GoMock package.
package cloudsecurity

import (
	reflect "reflect"

	securitygroup "antrea.io/nephe/pkg/cloud-provider/securitygroup"
	gomock "github.com/golang/mock/gomock"
)

// MockCloudSecurityGroupAPI is a mock of CloudSecurityGroupAPI interface.
type MockCloudSecurityGroupAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCloudSecurityGroupAPIMockRecorder
}

// MockCloudSecurityGroupAPIMockRecorder is the mock recorder for MockCloudSecurityGroupAPI.
type MockCloudSecurityGroupAPIMockRecorder struct {
	mock *MockCloudSecurityGroupAPI
}

// NewMockCloudSecurityGroupAPI creates a new mock instance.
func NewMockCloudSecurityGroupAPI(ctrl *gomock.Controller) *MockCloudSecurityGroupAPI {
	mock := &MockCloudSecurityGroupAPI{ctrl: ctrl}
	mock.recorder = &MockCloudSecurityGroupAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudSecurityGroupAPI) EXPECT() *MockCloudSecurityGroupAPIMockRecorder {
	return m.recorder
}

// CreateSecurityGroup mocks base method.
func (m *MockCloudSecurityGroupAPI) CreateSecurityGroup(arg0 *securitygroup.CloudResourceID, arg1 bool) <-chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityGroup", arg0, arg1)
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// CreateSecurityGroup indicates an expected call of CreateSecurityGroup.
func (mr *MockCloudSecurityGroupAPIMockRecorder) CreateSecurityGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityGroup", reflect.TypeOf((*MockCloudSecurityGroupAPI)(nil).CreateSecurityGroup), arg0, arg1)
}

// DeleteSecurityGroup mocks base method.
func (m *MockCloudSecurityGroupAPI) DeleteSecurityGroup(arg0 *securitygroup.CloudResourceID, arg1 bool) <-chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityGroup", arg0, arg1)
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// DeleteSecurityGroup indicates an expected call of DeleteSecurityGroup.
func (mr *MockCloudSecurityGroupAPIMockRecorder) DeleteSecurityGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityGroup", reflect.TypeOf((*MockCloudSecurityGroupAPI)(nil).DeleteSecurityGroup), arg0, arg1)
}

// GetSecurityGroupSyncChan mocks base method.
func (m *MockCloudSecurityGroupAPI) GetSecurityGroupSyncChan() <-chan securitygroup.SynchronizationContent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityGroupSyncChan")
	ret0, _ := ret[0].(<-chan securitygroup.SynchronizationContent)
	return ret0
}

// GetSecurityGroupSyncChan indicates an expected call of GetSecurityGroupSyncChan.
func (mr *MockCloudSecurityGroupAPIMockRecorder) GetSecurityGroupSyncChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityGroupSyncChan", reflect.TypeOf((*MockCloudSecurityGroupAPI)(nil).GetSecurityGroupSyncChan))
}

// UpdateSecurityGroupMembers mocks base method.
func (m *MockCloudSecurityGroupAPI) UpdateSecurityGroupMembers(arg0 *securitygroup.CloudResourceID, arg1 []*securitygroup.CloudResource, arg2 bool) <-chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecurityGroupMembers", arg0, arg1, arg2)
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// UpdateSecurityGroupMembers indicates an expected call of UpdateSecurityGroupMembers.
func (mr *MockCloudSecurityGroupAPIMockRecorder) UpdateSecurityGroupMembers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecurityGroupMembers", reflect.TypeOf((*MockCloudSecurityGroupAPI)(nil).UpdateSecurityGroupMembers), arg0, arg1, arg2)
}

// UpdateSecurityGroupRules mocks base method.
func (m *MockCloudSecurityGroupAPI) UpdateSecurityGroupRules(arg0 *securitygroup.CloudResourceID, arg1 []*securitygroup.IngressRule, arg2 []*securitygroup.EgressRule) <-chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecurityGroupRules", arg0, arg1, arg2)
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// UpdateSecurityGroupRules indicates an expected call of UpdateSecurityGroupRules.
func (mr *MockCloudSecurityGroupAPIMockRecorder) UpdateSecurityGroupRules(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecurityGroupRules", reflect.TypeOf((*MockCloudSecurityGroupAPI)(nil).UpdateSecurityGroupRules), arg0, arg1, arg2)
}
